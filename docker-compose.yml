services:
  db:
    image: postgres:17-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    env_file:
      - ./.env
    networks:
      - my_network

  cloudflared:
    profiles:
      - async
    image: cloudflare/cloudflared:latest
    command: ["tunnel", "run"]
    env_file:
      - ./.env
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN?Variable not set}
    networks:
      - my_network

  webhook:
    profiles:
      - async
    build:
      context: .
    depends_on:
      db:
        condition: service_healthy
      cloudflared:
        condition: service_started
    command:
      ["fastapi", "run", "--workers", "4", "apps/webhook/webhook/main.py"]
    env_file:
      - ./.env
    networks:
      - my_network

  prestart:
    build:
      context: .
    depends_on:
      db:
        condition: service_healthy
    command: ["bash", "scripts/prestart.sh"]
    env_file:
      - ./.env
    networks:
      - my_network

  async_scraper:
    profiles:
      - async
    build:
      context: .
    depends_on:
      db:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
      webhook:
        condition: service_started
    command: ["bash", "scripts/run_async_scraper.sh"]
    env_file:
      - ./.env
    networks:
      - my_network

  sync_scraper:
    profiles:
      - sync
    build:
      context: .
    depends_on:
      db:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    command: ["bash", "scripts/run_sync_scraper.sh"]
    env_file:
      - ./.env
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
