services:
  db:
    image: postgres:17-alpine
    container_name: db
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    env_file:
      - ./.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    networks:
      - my_network

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: ["tunnel", "run"]
    env_file:
      - ./.env
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN?Variable not set}
    networks:
      - my_network

  webhook:
    build:
      context: .
    container_name: webhook
    depends_on:
      db:
        condition: service_healthy
      cloudflared:
        condition: service_started
    command:
      ["fastapi", "run", "--workers", "4", "apps/webhook/webhook/main.py"]
    env_file:
      - ./.env
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
